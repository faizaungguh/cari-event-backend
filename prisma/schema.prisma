// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// Koneksi DB
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Model Endpoint Admin
model Admin {
  id       Int    @id
  username String @unique
  password String
  name     String

  // Relation
  blogs Blog[]//relation to blog | can see array blog that admin created

  @@map("admin")
}

model Blog {
  id       Int    @id
  title    String
  headline String
  content  String
  Admin    Admin? @relation(fields: [adminId], references: [id])
  adminId  Int? // can see who admin made this post
  createdAt DateTime @updatedAt

  @@map("blog")
}

// Model Endpoint Creator
model Creator {
  id          Int         @id
  username    String
  password    String
  creatorName String?
  logo        String? //path
  banner      String? //path
  description String?
  contact     String?
  medias      Media[] //relation to Media | Media Sosial website, instagram, twitter etc
  addresses   Address[] //relation to Address | Alamat kantor kreator
  guarantors  Guarantor[] //relation to Guarantor | Penjamin Creator
  legals      Legal[] //relation to Legal | berisi verifikasi data NPWP dan izin Usaha
  Event       Event?      @relation(fields: [eventId], references: [id])
  eventId     Int?

  @@map("creator")
}

model Media {
  id          Int      @id
  type        String
  description String 
  Creator     Creator? @relation(fields: [creatorId], references: [id])
  creatorId   Int?

  @@map("media")
}

model Address {
  id         Int       @id
  street     String
  kecamatan  String
  kabupaten  String
  postalCode String
  Creator    Creator?  @relation(fields: [creatorId], references: [id])
  creatorId  Int?
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId Int?

  @@map("address")
}

model Guarantor { //Penjamin dari Event Creator ini
  id        Int      @id
  name      String
  contact   String
  address   String
  idNumber  Int
  Creator   Creator? @relation(fields: [creatorId], references: [id])
  creatorId Int?

  @@map("guarantor")
}

model Legal {
  id                Int      @id
  npwpId            Int
  npwpImage         String //path
  legalLicense      Int
  legalLicenseImage String //path
  Creator           Creator? @relation(fields: [creatorId], references: [id])
  creatorId         Int?

  @@map("legal")
}

// Model Endpoint Customer
model Customer {
  id           Int           @id
  username     String
  password     String
  fullName     String
  idNumber     Int           @unique
  idImage      String
  contact      String
  addresses    Address[] //relation to address | alamat customer
  orders       Order[] //relation to order | order apa saja yang dibuat oleh customer
  transactions Transaction[] //relation to transaction | transaksi apa saja yang telah dilakukan oleh customer
  tickets      Tickets[] //relation to tickets | tiket yang telah dibayar customer untuk ditukar di event nantinya

  @@map("customer")
}

model Tickets {
  id       Int    @id
  ticketId String

  Customer      Customer?    @relation(fields: [customerId], references: [id])
  customerId    Int?
  Transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId Int?
}

// Model Endpoint Event
model Event {
  id            Int           @id
  title         String
  banner        String
  description   String
  detail        String?
  ticketClasses TicketClass[] //relation to Ticket | ada kelas tiket apa saja
  eventStart    DateTime
  eventEnd      DateTime
  categories    Category[] //relation to Category | masuk kategori event apa
  locations     Location[] //relation to Location
  creators      Creator[] //relation to Creator

  @@map("event")
}

// Model Endpoint TicketClass
model TicketClass {
  id        Int    @id
  class     String
  itemTotal Int
  price     Int
  Event     Event? @relation(fields: [eventId], references: [id])
  eventId   Int?
  Order     Order? @relation(fields: [orderId], references: [id])
  orderId   Int?

  @@map("ticket-class")
}

// Model Category
model Category {
  id          Int    @id
  type        String
  describtion String
  Event       Event? @relation(fields: [eventId], references: [id])
  eventId     Int?

  @@map("category")
}

// Model Location
model Location {
  id         Int    @id
  street     String
  kecamatatn String
  kabupaten  String
  postalCode String
  Event      Event? @relation(fields: [eventId], references: [id])
  eventId    Int?

  @@map("location")
}

// Model Endpoint Order
model Order {
  id            Int           @id
  tickets       TicketClass[]
  totalPrice    Int
  Customer      Customer?     @relation(fields: [customerId], references: [id])
  customerId    Int?
  Transaction   Transaction?  @relation(fields: [transactionId], references: [id])
  transactionId Int?

  @@map("order")
}

// Model Endpoint Transaction
model Transaction {
  id         Int       @id
  orders     Order[]
  Tickets    Tickets[]
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId Int?

  @@map("transaction")
}
